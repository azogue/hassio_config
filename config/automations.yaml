- alias: Buenas noches
  id: buenas_noches
  trigger:
    platform: time_pattern
    minutes: /5
  condition:
  - condition: time
    after: '23:50:00'
    before: 05:00:00
  - condition: state
    entity_id: media_player.tele
    state: 'off'
    for:
      minutes: 15
  - condition: state
    entity_id: light.dormitorio
    state: 'off'
    for:
      minutes: 3
  - condition: state
    entity_id: light.cocina
    state: 'off'
    for:
      minutes: 3
  - condition: state
    entity_id: light.salon
    state: 'off'
    for:
      minutes: 5
  - condition: state
    entity_id: light.hall_light
    state: 'off'
    for:
      minutes: 5
  - condition: state
    entity_id: light.estudio
    state: 'off'
    for:
      minutes: 5
  - condition: state
    entity_id: light.terraza
    state: 'off'
    for:
      minutes: 5
  - condition: template
    value_template: '{{ (states.person.eugenio.state == "home") or (states.person.carmen.state
      == "home") }}'
  - condition: template
    value_template: '{{ (states.sensor.sensor_office_illumination.state|int < 50)
      }}'
  - condition: template
    value_template: '{% if states.script.good_night.attributes.last_triggered %}{{as_timestamp(now())
      - as_timestamp(states.script.good_night.attributes.last_triggered) > 12 * 3600}}{%
      else %}{{ 1 > 0 }}{% endif %}'
  action:
  - service: script.turn_on
    entity_id: script.good_night
- alias: Encendido de TV si apagada y KODI play
  id: tv_on_if_off_and_kodi_play
  trigger:
    platform: state
    entity_id: media_player.kodi
    from: 'off'
    to: playing
  action:
  - service: media_player.turn_on
    entity_id: media_player.tv
  - service: telegram_bot.send_message
    data_template:
      title: '*TV ON*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: Encendido de TV automático en Kodi PLAY
      disable_notification: true
      inline_keyboard:
      - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call
        media_player.turn_on media_player.tele, ◼︎:/service_call media_player.media_stop
        media_player.kodi
      - Luces salón:/service_call light.toggle group.luces_salon, +:/init
- alias: Apagado de TV si encendida con salvapantallas
  id: tv_off_if_screensaver_some_time
  trigger:
    platform: state
    entity_id: binary_sensor.tv_in_screen_saver
    to: 'on'
    for:
      minutes: 7
  action:
  - service: media_player.turn_off
    entity_id: media_player.tele
  - service: telegram_bot.send_message
    data_template:
      title: '*TV OFF*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: Apagado de TV automático (en salvapantallas > 7 min)
      disable_notification: true
      inline_keyboard:
      - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call
        media_player.turn_on media_player.tele, ◼︎:/service_call media_player.media_stop
        media_player.tele
      - Luces salón:/service_call light.toggle group.luces_salon, +:/init
- alias: New BT device notifier
  id: new_device_notify
  trigger:
    platform: event
    event_type: device_tracker_new_device
  action:
  - service: notify.mobile_app_iphone
    data_template:
      title: Nuevo dispositivo detectado
      message: 'entity_id:

        * {{ trigger.event.as_dict()[''data''][''entity_id''] }}. Hostname: {{ trigger.event.as_dict()[''data''][''host_name'']
        }}'
      data:
        push:
          badge: 1
          sound: US-EN-Alexa-Motion-Detected-Generic.wav
          category: confirm
          action_data:
            entity_id: light.cuenco
            event: event
  - service: notify.gmail
    data_template:
      title: HASS - Nuevo dispositivo detectado
      message: 'entity_id: {{ trigger.event.as_dict()[''data''][''entity_id''] }}.
        Hostname: {{ trigger.event.as_dict()[''data''][''host_name''] }} [EVENT: {{
        trigger.event.as_dict()[''event_type''] }}]


        RAW: {{ trigger.event.as_dict() }}


        DEV TRACKER ATTRS: {{ states.device_tracker[trigger.event.as_dict()[''data''][''entity_id''].split(''.'')[1]].attributes
        }}'
- alias: Notify sunset
  id: sunset_notify
  trigger:
    platform: sun
    event: sunset
    offset: +00:00:00
  action:
  - service: telegram_bot.send_message
    data_template:
      title: Empieza la noche!
      message: Acaba de ponerse el sol... ¿Encendemos luces?
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: true
      inline_keyboard:
      - Luz salón:/service_call light.toggle group.luces_salon, Luz dormitorio:/service_call light.toggle light.dormitorio
      - Luz cocina:/service_call light.toggle light.cocina, Luz estudio:/service_call light.toggle light.estudio
  - service: notify.mobile_app_iphone
    data:
      title: Empieza la noche!
      message: Acaba de ponerse el sol..
      data:
        push:
          badge: 0
          sound: US-EN-Morgan-Freeman-Setting-The-Mood.wav
          category: confirm
- alias: Salón Select Scene
  id: select_scene_in_living_room
  trigger:
    platform: state
    entity_id: input_select.salon_light_scene
  action:
  - service: python_script.select_light_profile
    data_template:
      scene: '{{ trigger.to_state.state }}'
- alias: TV Source Select
  id: select_tv_source
  trigger:
    platform: state
    entity_id: input_select.tv_source
  action:
  - service: python_script.select_tv_source
    data_template:
      scene: '{{ trigger.to_state.state }}'
- alias: Purifier favorite level
  id: set_purifier_favorite_level
  trigger:
    platform: state
    entity_id: input_number.airpurifier_office_favorite_level
  action:
  - service: xiaomi_miio.fan_set_favorite_level
    data:
      entity_id: fan.airpurifier_office
    data_template:
      level: '{{ states( "input_number.airpurifier_office_favorite_level" ) | int
        }}'
- alias: Encendido de purificador si AQI alto
  id: encendido_de_purificador_si_aqi_alto
  trigger:
    platform: numeric_state
    entity_id: sensor.airpurifier_office_air_quality_pm25
    above: 40
  condition:
    condition: or
    conditions:
    - condition: state
      entity_id: fan.airpurifier_office
      state: 'off'
      for:
        seconds: 30
    - condition: template
      value_template: '{{ state_attr(''fan.airpurifier_office'', ''speed'') == ''Silent''
        }}'
  action:
  - service: notify.mobile_app_iphone
    data:
      title: Purificador activado
      message: '{% if states.fan.airpurifier_office.state == ''off'' %}Estaba apagado{%
        else %}Estaba en modo silencioso{% endif %}, pero AQI = {{ states.sensor.airpurifier_office_air_quality_pm25.state
        }}, así que pasa a modo Auto.'
      data:
        push:
          category: airpurif
  - service: fan.set_speed
    data:
      entity_id: fan.airpurifier_office
      speed: Auto
- alias: Purificador a auto desde velocidad fija
  id: purificador_to_auto_from_fixed
  trigger:
    platform: numeric_state
    entity_id: sensor.airpurifier_office_air_quality_pm25
    below: 10
    for:
      minutes: 2
  condition:
  - condition: template
    value_template: '{{ (state_attr(''fan.airpurifier_office'', ''speed'') == ''Favorite'')
      and (state_attr(''fan.airpurifier_office'', ''favorite_level'') > 3) }}'
  action:
  - service: fan.set_speed
    data:
      entity_id: fan.airpurifier_office
      speed: Auto
  - service: notify.mobile_app_iphone
    data:
      title: Purificador en modo auto
      message: 'AQI es suficientemente baja: {{ states.sensor.airpurifier_office_air_quality_pm25.state
        }}, activando modo Auto.'
      data:
        push:
          category: airpurif
- alias: Start HomeAssistant
  id: hass_startup
  trigger:
  - platform: homeassistant
    event: start
  action:
  - service: shell_command.cmd_init_ssh_identity
  - service: python_script.set_telegram_chatid_sensor
    data:
      chat_id: !secret telegram_bot_chat_id_admin
  - service: python_script.start_states
- alias: Update notifications
  id: update_available_notify
  trigger:
  - platform: state
    entity_id: binary_sensor.updater
    from: 'off'
    to: 'on'
  action:
  - service: notify.mobile_app_iphone
    data:
      title: New Home Assistant Release
      message: 'Home Assistant is now available: {{ states.binary_sensor.updater.attributes
        }}.'
      data:
        push:
          badge: 1
          category: confirm
- alias: Turn ON TV with lights (hue switch)
  id: turn_on_tv_dimmer_switch_action
  trigger:
    platform: state
    entity_id: sensor.interruptor_salon
    to: 1_hold_up
  action:
  - service: python_script.start_kodi_play_tv
  - event: flash_light
    event_data:
      color: orange
      persistence: 2
      flashes: 3
- alias: Turn OFF all (hue switch)
  id: turn_off_all_dimmer_switch_action
  trigger:
    platform: state
    entity_id: sensor.interruptor_salon
    to: 4_hold_up
  action:
  - service: media_player.turn_off
    entity_id: media_player.tele,media_player.salon
  - event: flash_light
    event_data:
      color: red
      persistence: 1
      flashes: 2
  - delay:
      seconds: 5
  - service: homeassistant.turn_off
    entity_id: group.all_lights
  - service: telegram_bot.send_message
    data_template:
      title: '*All Off*'
      message: Apagando TV y luces al mantener pulsado OFF en mando hue
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: true
      inline_keyboard:
      - TV OFF:/service_call media_player.turn_off media_player.tele, TV ON:/service_call
        media_player.turn_on media_player.tele
      - Aura habitación:/service_call light.toggle light.aura_habitacion
- alias: Turn TV Night scene (hue switch)
  id: turn_tv_night_scene_dimmer_switch_action
  trigger:
    platform: state
    entity_id: sensor.interruptor_salon
    to: 3_hold_up
  action:
  - service: input_select.select_option
    entity_id: input_select.salon_light_scene
    data:
      option: TV Night
- alias: Morning Turn OFF (hue switch)
  id: morning_turn_off_dimmer_switch_action
  trigger:
    platform: state
    entity_id: sensor.interruptor_dormitorio
    to: 4_hold_up
  action:
  - service: homeassistant.turn_off
    entity_id: light.dormitorio,light.tira_cocina,input_boolean.manual_trigger_lacafetera
  - event: flash_light
    event_data:
      color: orange
      persistence: 3
      flashes: 1
      lights: light.aura_habitacion
  - service: telegram_bot.send_message
    data_template:
      title: '*All Off*'
      message: Apagando Despertador al mantener pulsado OFF en mando hue
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: true
      inline_keyboard:
      - Aura habitación:/service_call light.toggle light.aura_habitacion
  - service: media_player.turn_off
    entity_id: media_player.dormitorio
- alias: Botvac error notification
  id: botvac_error_notify
  trigger:
    platform: state
    entity_id: vacuum.robot_aspirador
  condition:
    condition: template
    value_template: '{{ ("error" in states.vacuum.robot_aspirador.attributes) or (states.vacuum.robot_aspirador.attributes.status
      == "Error") }}'
  action:
    service: telegram_bot.send_message
    data_template:
      title: '*Botvac Error*'
      message: 'El robot aspirador ha fallado: _{{ states.vacuum.robot_aspirador.attributes.error
        }}_ (Status: {{ states.vacuum.robot_aspirador.attributes.status }}, batt:
        {{ states.vacuum.robot_aspirador.attributes.battery_level }} %)

        '
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      disable_notification: false
      inline_keyboard:
      - Locate botvac:/service_call vacuum.locate vacuum.robot_aspirador, To dock:/service_call
        vacuum.return_to_home vacuum.robot_aspirador
      - Start:/service_call vacuum.start_pause vacuum.robot_aspirador, Stop:/service_call
        vacuum.stop vacuum.robot_aspirador, +:/init
- id: dev_tracker_carmen_out_hospital
  alias: Carmen sale del hospital
  trigger:
  - platform: zone
    entity_id: device_tracker.iphonese
    zone: zone.hospital
    event: leave
    platform: zone
    zone: zone.hospital
  action:
  - data_template:
      message: Carmen acaba de salir del hospital
      target: !secret telegram_bot_chat_id_admin
      title: '*Salida del Hospital*'
    service: telegram_bot.send_message
- alias: Carmen llega al hospital
  id: dev_tracker_carmen_in_hospital
  trigger:
  - platform: zone
    entity_id: device_tracker.iphone_carmen
    zone: zone.hospital
    event: enter
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Llegada a Hospital*'
      target: !secret telegram_bot_chat_id_admin
      message: Carmen acaba de llegar al hospital.
      disable_notification: true
- alias: Aviso de sensor MQTT offline
  id: mqtt_sensor_go_offline_notify
  trigger:
  - platform: state
    entity_id: sensor.sensor_bedroom_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_livingroom_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_office_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_kitchen_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_terraza_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_galeria_snum
    to: unknown
    for:
      minutes: 2
  - platform: state
    entity_id: sensor.sensor_bathroom_ac_snum
    to: unknown
    for:
      minutes: 2
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Sensor offline*'
      target: !secret telegram_bot_chat_id_admin
      message: El micro ESP [`{{ trigger.to_state.attributes.friendly_name }}`] parece
        que *ha fallado*. Revísalo!
- alias: Aviso de sensor MQTT online
  id: mqtt_sensor_go_online_notify
  trigger:
  - platform: state
    entity_id: sensor.sensor_bedroom_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_livingroom_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_office_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_kitchen_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_terraza_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_galeria_snum
    from: unknown
  - platform: state
    entity_id: sensor.sensor_bathroom_ac_snum
    from: unknown
  condition:
    condition: template
    value_template: '{{ (now() - trigger.from_state.last_changed).total_seconds()
      > 120 }}'
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Sensor online*'
      target: !secret telegram_bot_chat_id_admin
      message: 'El micro ESP `{{ trigger.to_state.attributes.friendly_name[9:]}}`
        parece que ha **revivido**: Wake_{{ trigger.to_state.attributes.status.wake
        }}(WR:{{ trigger.to_state.attributes.status.wake_reason }},ERR:{{ trigger.to_state.attributes.status.c_error
        }}); Wifi -> {{ trigger.to_state.attributes.wifi_ap }} [CH {{ trigger.to_state.attributes.network.CH
        }}, RSSI: {{ trigger.to_state.attributes.rssi }}, IP_{{ trigger.to_state.attributes.ip[10:]
        }}]. Estaba desaparecido desde hace {{ ((now() - trigger.from_state.last_changed).total_seconds()
        / 60) | round(1) }} min.'
      disable_notification: true
- alias: Apagado automático de termo ACS
  id: termo_auto_off
  trigger:
    platform: numeric_state
    entity_id: sensor.esp32ener_ch2
    below: 300
    for:
      minutes: 2
      seconds: 30
  condition:
  - condition: state
    entity_id: switch.calentador
    state: 'on'
    for:
      minutes: 35
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Calentador apagado*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: '{% set delta_cal_on = (now() - states.switch.calentador.last_changed).total_seconds()
        %}*Tiempo encendido: {{(delta_cal_on // 3600) | int }}h:{{ ((delta_cal_on
        % 3600) / 60) | int }}m*. El calentador de agua ha llegado a su temperatura
        de consigna, así que lo he apagado, junto a la bomba de circulación.'
      disable_notification: true
      inline_keyboard:
      - Encender Calentador:/service_call switch.turn_on switch.calentador, Apagar
        Calentador:/service_call switch.turn_off switch.calentador
      - Encender bomba ACS:/service_call switch.turn_on switch.03200296dc4f22293a7f,
        Apagar bomba ACS:/service_call switch.turn_off switch.03200296dc4f22293a7f
  - service: switch.turn_off
    entity_id: switch.calentador,switch.03200296dc4f22293a7f
- alias: Notificación de cambio de IP
  id: notif_cambio_ip
  trigger:
    platform: state
    entity_id: sensor.ip_externa
  condition:
    condition: template
    value_template: '{{ (trigger.to_state.state | length > 10) and (trigger.to_state.state
      != ''unavailable'') }}'
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Cambio de IP*'
      target: !secret telegram_bot_chat_id_admin
      message: 'La IP pública se acaba de renovar: *{{ trigger.to_state.state }}*,
        la anterior era: _{{ trigger.from_state.state }}_'
      disable_notification: true
- alias: IFTTT incoming event
  id: ifttt_incoming_event
  trigger:
    platform: event
    event_type: ifttt_webhook_received
    event_data:
      motion: true
  action:
    service: python_script.incoming_ifttt_data
    data_template:
      message: '{{ trigger.event.data.message }}'
- alias: Apagado de AC
  id: auto_turnoff_ac
  trigger:
  - platform: template
    value_template: '{{ is_state_attr(''climate.termostato_ac'', ''hvac_action'',
      ''idle'') }}'
    for:
      seconds: 30
  - platform: template
    value_template: '{{ is_state_attr(''climate.calefaccion'', ''hvac_action'', ''idle'')
      }}'
    for:
      seconds: 30
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Auto-OFF* de {{ trigger.to_state.attributes.friendly_name }}'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: 'Apagado de {{ trigger.to_state.attributes.friendly_name }} (Tª: {{
        trigger.to_state.attributes.current_temperature }} °C / target: {{ trigger.to_state.attributes.temperature
        }} °C) (en `{{ trigger.from_state.state }}` desde {{ as_timestamp(trigger.from_state.last_changed)
        | timestamp_local }})'
      disable_notification: true
      inline_keyboard:
      - Deshacer COOL:/service_call climate.set_hvac_mode termostato_ac cool
      - Deshacer HOT:/service_call climate.set_hvac_mode calefaccion heat
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.termostato_ac
      hvac_mode: 'off'
  - service: climate.set_hvac_mode
    data:
      entity_id: climate.calefaccion
      hvac_mode: 'off'
  - service: automation.turn_off
    entity_id: automation.apagado_de_ac
- alias: Alerta de batería baja
  id: battery_is_near_dead
  trigger:
  - platform: numeric_state
    entity_id: sensor.ipad_de_eugenio_battery_level
    below: 45
  condition:
  - condition: state
    entity_id: sensor.ipad_de_eugenio_battery_state
    state: Unplugged
    for:
      hours: 1
  action:
  - service: telegram_bot.send_message
    data_template:
      title: '*Batería baja en {{ trigger.to_state.attributes.friendly_name }}*'
      target: '{{ states.sensor.telegram_default_chatid.state | int }}'
      message: 'Pon a cargar el {{ trigger.to_state.attributes[''Device Type''] }}
        (Batería: {{ trigger.to_state.state }} %)'
      disable_notification: false
- alias: Alerta de puerta de entrada
  id: main_door_open
  trigger:
  - platform: state
    entity_id: input_boolean.mirror_eve_main_door
  action:
  - event: main_door_triggered
    event_data_template:
      state: '{{ trigger.to_state.state }}'
      last_state_ts: '{{ trigger.from_state.last_changed }}'
      all_data: '{{ trigger }}'
- alias: Auto alarm timer finished
  id: auto_alarm_timer_finished
  trigger:
    platform: event
    event_type: timer.finished
    event_data:
      entity_id: timer.alarm_auto_on
  action:
  - service: python_script.main_door_opening
    data_template:
      last_state_ts: '{{ trigger.event.data }}'
      is_timer_finished: 1
- id: 'activa_extras_inmersion_mode'
  alias: Set inmersion mode
  description: Apaga pie sofa con activación de ambilight salón y pone pan cam en
    reposo
  trigger:
  - entity_id: switch.ambilight_plus_hue
    from: 'off'
    platform: state
    to: 'on'
  condition: []
  action:
  - data:
      command: cam reposo
    service: python_script.dev_command
  - data:
      entity_id: light.pie_sofa
    service: light.turn_off
- alias: Cambio de tarifa eléctrica
  id: cambio_tarifa_punta_valle
  trigger:
  - platform: time
    at: '22:00:00'
  - platform: time
    at: '23:00:00'
  - platform: time
    at: '12:00:00'
  - platform: time
    at: '13:00:00'
  condition:
  - condition: template
    value_template: '{{ (utcnow().hour == 21) or (utcnow().hour == 11) }}'
  action:
  - service: utility_meter.select_tariff
    entity_id: utility_meter.daily_energy_punta_valle,utility_meter.billable_energy
    data_template:
      tariff: '{% if (utcnow().hour >= 11) and (utcnow().hour < 21) %}Punta{% else
        %}Valle{% endif %}'
- id: 'detect_edge_hue_tap'
  alias: Detect edge changes in tap switch
  description: ''
  trigger:
  - entity_id: sensor.interruptor_exterior
    platform: state
  condition: []
  action:
  - event: hue_tap_triggered
    event_data: {}
- id: 'detect_edge_hue_dimmer_kitchen'
  alias: Detect edge changes in hue dimmer kitchen
  description: ''
  trigger:
  - entity_id: sensor.interruptor_cocina
    platform: state
  condition: []
  action:
  - event: hue_switch_kitchen_triggered
    event_data: {}
- id: 'turn_on_hall_con_cuadro'
  alias: Enciende Hall al abrir cuadro
  description: Encendido automático del Hall al abrir el cuadro de protecciones
  trigger:
  - entity_id: binary_sensor.cuadro_movimiento
    from: 'off'
    platform: state
    to: 'on'
  condition:
  - condition: state
    entity_id: light.hall_light
    state: 'off'
  action:
  - entity_id: light.hall_light
    service: light.turn_on
